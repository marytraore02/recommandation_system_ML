"""
Script pour d√©clencher manuellement l'analyse analytics sans attendre le cron.
Utile pour tester ou forcer une ex√©cution imm√©diate.
"""

import asyncio
import os
from arq import create_pool
from arq.connections import RedisSettings
from dotenv import load_dotenv

load_dotenv()


async def trigger_analytics():
    """D√©clenche manuellement la t√¢che d'analyse"""
    
    # Configuration Redis
    redis_settings = RedisSettings(
        host=os.getenv("REDIS_HOST"),
        port=int(os.getenv("REDIS_PORT")),
        database=int(os.getenv("REDIS_DB")),
    )
    
    # Cr√©er une connexion au pool Redis ARQ
    redis = await create_pool(redis_settings)
    
    try:
        print("üöÄ D√©clenchement manuel de l'analyse analytics...")
        
        # Enqueue la t√¢che pour ex√©cution imm√©diate
        job = await redis.enqueue_job('run_analytics_task')
        
        print(f"‚úÖ T√¢che enregistr√©e avec l'ID: {job.job_id}")
        print("‚è≥ En attente de l'ex√©cution...")
        
        # Attendre le r√©sultat (max 1 heure)
        result = await job.result(timeout=3600)
        
        print("\n" + "="*80)
        print("üìä R√âSULTAT DE L'ANALYSE:")
        print("="*80)
        print(f"Status: {result.get('status')}")
        print(f"Timestamp: {result.get('timestamp')}")
        
        if result.get('status') == 'success':
            print(f"√âv√©nements analys√©s (24h): {result.get('events_analyzed')}")
            print(f"Total √©v√©nements charg√©s: {result.get('total_events_loaded')}")
            print(f"Pays analys√©s: {result.get('countries')}")
            print(f"Cat√©gories analys√©es: {result.get('categories')}")
            print("\n‚úÖ Analyse termin√©e avec succ√®s!")
        elif result.get('status') == 'error':
            print(f"\n‚ùå Erreur: {result.get('error')}")
        else:
            print(f"\n‚ö†Ô∏è Statut: {result.get('status')}")
        
        print("="*80)
        
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©clenchement: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Fermer la connexion
        await redis.close()


if __name__ == "__main__":
    asyncio.run(trigger_analytics())